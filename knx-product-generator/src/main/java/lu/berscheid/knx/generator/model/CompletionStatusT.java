//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.10.05 at 10:56:00 PM CEST 
//


package lu.berscheid.knx.generator.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for CompletionStatus_t.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="CompletionStatus_t">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Undefined"/>
 *     &lt;enumeration value="Editing"/>
 *     &lt;enumeration value="FinishedDesign"/>
 *     &lt;enumeration value="FinishedCommissioning"/>
 *     &lt;enumeration value="Tested"/>
 *     &lt;enumeration value="Accepted"/>
 *     &lt;enumeration value="Locked"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "CompletionStatus_t")
@XmlEnum
public enum CompletionStatusT {

    @XmlEnumValue("Undefined")
    UNDEFINED("Undefined"),
    @XmlEnumValue("Editing")
    EDITING("Editing"),
    @XmlEnumValue("FinishedDesign")
    FINISHED_DESIGN("FinishedDesign"),
    @XmlEnumValue("FinishedCommissioning")
    FINISHED_COMMISSIONING("FinishedCommissioning"),
    @XmlEnumValue("Tested")
    TESTED("Tested"),
    @XmlEnumValue("Accepted")
    ACCEPTED("Accepted"),
    @XmlEnumValue("Locked")
    LOCKED("Locked");
    private final String value;

    CompletionStatusT(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static CompletionStatusT fromValue(String v) {
        for (CompletionStatusT c: CompletionStatusT.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
